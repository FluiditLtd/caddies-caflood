/*
    
Copyright (c) 2013 Centre for Water Systems,
                   University of Exeter

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

// Set the elevation value for the boundary cell inn order to simulate
// OPEN or CLOSED boundary.
CA_FUNCTION setBoundaryEle(CA_GRID grid, CA_CELLBUFF_REAL_IO ELV, CA_CELLBUFF_STATE_I MASK, 
			   CA_GLOB_REAL_I elv)
{
  // Initialise the grid
  CA_GRID_INIT(grid);

  // Retrive the index of the main cell.
  CA_INDEX index = caIndex(grid, 0);

  // Read Mask.
  CA_STATE mask  = caReadCellBuffState(grid,MASK,index);

  // Read bit 31 (true if the main cell is nodata and at least one
  // neighbour has data)
  CA_STATE bit31  = caReadBitsState(mask,31,32);

  // If bit 31 is false do nothing.
  if(bit31 == 0)
    return;

  // Set the new elevation value for the boundary cell.
  caWriteCellBuffReal(grid,ELV,elv);
}
