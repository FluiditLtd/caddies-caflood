/*
    
Copyright (c) 2013 Centre for Water Systems,
                   University of Exeter

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

// Compute the outflow from the water depth using weight method
// version 1 
// This version compute a simplified manning equation and the
// critical flow using the water depth to find the maximum flow.  This
// maximum flow is considered as maximum flow allowed in the
// direction of maximum difference in water volume. Thus the maximum
// flow is used to limit the total outflow from the cells.

// ATTENTION! This version check if there is an outflow when the cell
// is in the border of the box and set an alarm.

CA_FUNCTION outflowWCA2Dv1(CA_GRID grid, CA_EDGEBUFF_REAL_IO OUTF,
			   CA_CELLBUFF_REAL_I ELV, CA_CELLBUFF_REAL_I MANNING, CA_CELLBUFF_REAL_I WD, 
			   CA_CELLBUFF_STATE_I MASK, CA_ALARMS_O ALARMS,
			   CA_GLOB_REAL_I ignore_wd, CA_GLOB_REAL_I tol_delwl,
			   CA_GLOB_REAL_I dt)
{					       
  // Initialise the grid
  CA_GRID_INIT(grid);
  
  // Read Mask.
  CA_STATE mask  = caReadCellBuffState(grid,MASK,0);

  // Retrieve the water depth of the main cell.
  CA_REAL  wdmain = caReadCellBuffReal(grid,WD,0);
  
  // Retrieve the roughness of the main cell.
  CA_REAL  roughness = 1.0 / caReadCellBuffReal(grid,MANNING,0);

  // Read bit 0  (false the main cell has nodata)
  CA_STATE bit0  = caReadBitsState(mask,0,1);

  // If the main cell has no data (bit0 is false ) or there is no
  // water do not compute the cell.
  if(bit0 == 0 ||  wdmain < ignore_wd)
    return;
  
  // Create an array which will contain various water values during the
  // computation for each neighbourh cell, in the following order:
  // 1) WATER depth
  // 2) WATER level
  // 3) WATER difference with main cell.
  CA_ARRAY_CREATE(grid, CA_REAL, WATER,caNeighbours+1);
  
  // Create an array which will contain various weight value during the
  // computation for each neighbour cell, in the following order:
  // 1) Elevation
  // 2) Weight.
  // Attention, for the majority of the code whe we talk about weight
  // we mainly inted the numerator of the weight fraction.
  CA_ARRAY_CREATE(grid, CA_REAL, WEIGHT, caNeighbours+1);  

  // Read the water depth of the neighbourhood cells (store temporarily into WATER).
  caReadCellBuffRealCellArray(grid,WD,WATER);

  // Read the elevation of the neighbourhood cells, (stored temporarily in WEIGHT).
  caReadCellBuffRealCellArray(grid,ELV,WEIGHT);

  // The minimum difference in water volume This is set as maximum as
  // starting value and re-check for each positive difference
  CA_REAL mindelwv = 10000.0;  

  // The total weight
  CA_REAL totalw = 0.0;

  // Store the values needed of the neighbour cell with maximum weight.
  CA_REAL weight_max = 0.0;
  CA_REAL delwl_max  = 0.0;
  CA_REAL dx_max     = 0.0;
    
  // Compute the water level of the central cell since WATER and WEIGHT
  // contein respectively the water detph and elevation.
  WATER[0]+=WEIGHT[0];    

  // Find the difference in water level / water volume between the
  // main cell and each neighbour cell in order to compute the weight.
  for(int k=1; k<=caNeighbours; ++k)
  {
    // The weight value of this neighbour cell.
    CA_REAL weight = 0.0;

    // Compute the water level of the cell since WATER and WEIGHT
    // contein respectively the water detph and elevation.
    WATER[k]+=WEIGHT[k];

    // Compute the difference in water level (wich cannot be more than
    // a limiting value). This will be store in WLA;
    CA_REAL delwl = caMinReal(WATER[0] - WATER[k], 50.0);

    // If the difference in water level is higher tha a tolerance, then
    // the neighbour cell is downstream. Upstream cell are ignored.
    if(delwl>tol_delwl)
    {
      // Compute the difference in water volume.
      CA_REAL delwv = delwl * caArea(grid,k);

      // Get the minimum difference in water volume of the downstreams cell.
      mindelwv = caMinReal(mindelwv, delwv);
      
      // Get the weight value.
      // In the futere here we will have to add the Manning's factor.
      weight = delwv;
    }
   
    // memorise the numerator weight of the cell and the total weight
    WEIGHT[k] = weight;
    totalw   += weight; 

    // Check if this is the maximum weight and eventual save the
    // values.
    if(weight>weight_max)
    {
      weight_max = weight;
      delwl_max  = delwl;
      dx_max     = caLength(grid,0,k);
    }
  }

  // At this point if the total weight is zero, then all
  // the other cell have higher water level or there is too small
  // difference. Thus there is not outflow. Skip this cell
  if(totalw<=0.0)
    return;

  // Now we have to compute the weight of the main cell. This is the
  // minimum differenc in water volume. We add this weight to the total weight.
  totalw += mindelwv;  
  
  // The maximum velocity allow is 10 meter per seconds.
  CA_REAL max_vh = 10.0;

  // Compute the roughness and slope part of the manning
  // equation. Limits this factor to be no more than sqrt(9.81)~3.132 which
  // is the critical velocity factor.
  // Water contains water difference
  CA_REAL factor_vh = caMinReal( roughness*caSqrtReal(delwl_max/dx_max), 3.132 );

  // Compute a the simplified Manninq equation where instead
  // of using R^(2/3) we use WD^(1/2). Thus it is a mix between
  // critical vel and Manning equation.
  max_vh  = caMinReal(max_vh, factor_vh * caSqrtReal(wdmain) );

  // Compute maximum flux using maximum veocity and the data from the
  // cell with maximum weight.
  CA_REAL max_flux = max_vh * wdmain * dt * dx_max;  

  // Compute the total amount of output water volume that we can move
  // from the main cell. This is the minimum between.
  // 1) the minimum difference of water level of the  neighbourhood 
  // 2) the water level in the cell.
  // 3) the total flux available depending on the maximum flux.
  CA_REAL outwv = caMinReal(caMinReal(mindelwv,wdmain*caArea(grid,0)), max_flux*totalw/weight_max);
  

  // Compute volume outflow from the main cell using the eventual
  // positive weight.
  for(int k=1; k<=caNeighbours; ++k)
  {
    // Consider only the downstream cell, i.e. positive weight.
    if(WEIGHT[k]>0.0)
    {
      // Compute flux using the weight system 
      CA_REAL flux = outwv*(WEIGHT[k] / totalw);
      
      // If the edge is one of the edges that can be updated without
      // overwriting the buffer, the outflux is positive otherwise is
      // negative.
      if(k > caUpdateEdges(grid))
	flux=-flux;

      // Set flux into the edge buffer.
      caWriteEdgeBuffReal(grid,OUTF,k,flux);
    }
  }
  
  // If the code reach here mean that there is an outflux.  Check if
  // the cell is in the border of the box and if it is the case set an
  // alarm.
  if(caBoxStatus(grid)>0)
    caActivateAlarm(grid, ALARMS,0);
}
