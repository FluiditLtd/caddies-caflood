/*
    
Copyright (c) 2013 Centre for Water Systems,
                   University of Exeter

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

// Update the peak values of edge buffer.  ATTENTION only the cell
// value that have data (bit0 is true) and the boundary cells (bit 31
// mask true) are considered.
// WARNING compute the absolute value.

CA_FUNCTION updatePEAKE(CA_GRID grid, CA_EDGEBUFF_REAL_IO PEAK, CA_EDGEBUFF_REAL_I SRC, 
			CA_CELLBUFF_STATE_I MASK)
{
  // Initialise the grid
  CA_GRID_INIT(grid);

  // Create the array which will contain the src edges.
  CA_ARRAY_CREATE(grid, CA_REAL, SRCE, caEdges+1);

  // Create the array which will contain the peak edges.
  CA_ARRAY_CREATE(grid, CA_REAL, PEAKE, caEdges+1);

  // Read Mask of the main cell.
  CA_STATE mask  = caReadCellBuffState(grid,MASK,0);

  // Read bit 0  (false the main cell has nodata)
  CA_STATE bit0  = caReadBitsState(mask,0,1);

  // Read bit 31 (true if the main cell is nodata in at least one
  // neighbour has data)
  CA_STATE bit31  = caReadBitsState(mask,31,32);

  // If the main cell has no data and none of the neighbour has data,
  // then do nothing.
  if(bit0 == 0 && bit31 == 0)
    return;

  // Read the edges of the main cell.
  caReadEdgeBuffRealEdgeArray(grid, SRC, 0, SRCE);

  // Read the edges of the peak values.
  caReadEdgeBuffRealEdgeArray(grid, PEAK, 0, PEAKE);

  // Loop through the edges.
  for(int e=1; e<=caEdges; e++)
  {
    if(e<=caUpdateEdges(grid))
    {
      // Get the maximum.
      CA_REAL  max = caMaxReal(SRCE[e],PEAKE[e]);
     
      // Update the maximum value.
      caWriteEdgeBuffReal(grid,PEAK,e,max);
    }
  }    
}
